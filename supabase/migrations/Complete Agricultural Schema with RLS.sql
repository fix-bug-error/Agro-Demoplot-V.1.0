-- Complete Agricultural Management System Schema with RLS Policies
-- This schema includes all tables and relationships with proper Row Level Security

-- Enable UUID extension
create extension if not exists "uuid-ossp";

-- Farmers Table
create table farmers (
  id bigint generated by default as identity primary key,
  full_name text not null,
  gender text,
  phone_number text,
  address text,
  farmer_group text,
  photo_url text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- User â†” Farmers (junction table, using Clerk user_id text)
create table user_farmers (
  id bigint generated by default as identity primary key,
  user_id text not null,
  farmer_id bigint not null references farmers(id) on delete cascade,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  constraint uniq_user_farmer unique (user_id, farmer_id)
);

-- Plots Table
create table plots (
  id bigint generated by default as identity primary key,
  farmer_id bigint not null references farmers(id) on delete cascade,
  plot_name text not null,
  location_name text,
  latitude double precision,
  longitude double precision,
  area_hectares double precision,
  map_image_url text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Climate Data Table
create table climate_data (
  id bigint generated by default as identity primary key,
  plot_id bigint not null references plots(id) on delete cascade,
  date date not null,
  rainfall_mm double precision,
  temperature_celsius double precision,
  humidity_percent double precision,
  wind_speed_kmh double precision,
  recorded_at timestamp with time zone default timezone('utc'::text, now()) not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Pest Monitoring Table
create table pest_monitoring (
  id bigint generated by default as identity primary key,
  plot_id bigint not null references plots(id) on delete cascade,
  threat_type text not null, -- 'hama', 'penyakit', 'gulma'
  threat_name text not null,
  status text not null, -- 'terdeteksi', 'waspada', 'terkendali'
  description text,
  photo_url text,
  detected_at timestamp with time zone default timezone('utc'::text, now()) not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Recommendations Table
create table recommendations (
  id bigint generated by default as identity primary key,
  plot_id bigint not null references plots(id) on delete cascade,
  recommendation_title text not null,
  recommendation_text text not null,
  recommendation_date date not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security on all tables
alter table farmers enable row level security;
alter table user_farmers enable row level security;
alter table plots enable row level security;
alter table climate_data enable row level security;
alter table pest_monitoring enable row level security;
alter table recommendations enable row level security;

-- RLS Policies for Farmers Table
create policy "Users can view their own farmers"
  on farmers for select
  using (
    id in (
      select farmer_id 
      from user_farmers 
      where user_id = auth.jwt() ->> 'sub'
    )
  );

create policy "Users can insert their own farmers"
  on farmers for insert
  with check (
    id in (
      select farmer_id 
      from user_farmers 
      where user_id = auth.jwt() ->> 'sub'
    )
  );

create policy "Users can update their own farmers"
  on farmers for update
  using (
    id in (
      select farmer_id 
      from user_farmers 
      where user_id = auth.jwt() ->> 'sub'
    )
  );

create policy "Users can delete their own farmers"
  on farmers for delete
  using (
    id in (
      select farmer_id 
      from user_farmers 
      where user_id = auth.jwt() ->> 'sub'
    )
  );

-- RLS Policies for User_Farmers Table
create policy "Users can view their own user_farmers relationships"
  on user_farmers for select
  using (user_id = auth.jwt() ->> 'sub');

create policy "Users can insert their own user_farmers relationships"
  on user_farmers for insert
  with check (user_id = auth.jwt() ->> 'sub');

create policy "Users can update their own user_farmers relationships"
  on user_farmers for update
  using (user_id = auth.jwt() ->> 'sub');

create policy "Users can delete their own user_farmers relationships"
  on user_farmers for delete
  using (user_id = auth.jwt() ->> 'sub');

-- RLS Policies for Plots Table
create policy "Users can view plots for their farmers"
  on plots for select
  using (
    farmer_id in (
      select farmer_id 
      from user_farmers 
      where user_id = auth.jwt() ->> 'sub'
    )
  );

create policy "Users can insert plots for their farmers"
  on plots for insert
  with check (
    farmer_id in (
      select farmer_id 
      from user_farmers 
      where user_id = auth.jwt() ->> 'sub'
    )
  );

create policy "Users can update plots for their farmers"
  on plots for update
  using (
    farmer_id in (
      select farmer_id 
      from user_farmers 
      where user_id = auth.jwt() ->> 'sub'
    )
  );

create policy "Users can delete plots for their farmers"
  on plots for delete
  using (
    farmer_id in (
      select farmer_id 
      from user_farmers 
      where user_id = auth.jwt() ->> 'sub'
    )
  );

-- RLS Policies for Climate Data Table
create policy "Users can view climate data for their plots"
  on climate_data for select
  using (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

create policy "Users can insert climate data for their plots"
  on climate_data for insert
  with check (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

create policy "Users can update climate data for their plots"
  on climate_data for update
  using (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

create policy "Users can delete climate data for their plots"
  on climate_data for delete
  using (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

-- RLS Policies for Pest Monitoring Table
create policy "Users can view pest monitoring for their plots"
  on pest_monitoring for select
  using (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

create policy "Users can insert pest monitoring for their plots"
  on pest_monitoring for insert
  with check (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

create policy "Users can update pest monitoring for their plots"
  on pest_monitoring for update
  using (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

create policy "Users can delete pest monitoring for their plots"
  on pest_monitoring for delete
  using (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

-- RLS Policies for Recommendations Table
create policy "Users can view recommendations for their plots"
  on recommendations for select
  using (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

create policy "Users can insert recommendations for their plots"
  on recommendations for insert
  with check (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

create policy "Users can update recommendations for their plots"
  on recommendations for update
  using (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

create policy "Users can delete recommendations for their plots"
  on recommendations for delete
  using (
    plot_id in (
      select id 
      from plots 
      where farmer_id in (
        select farmer_id 
        from user_farmers 
        where user_id = auth.jwt() ->> 'sub'
      )
    )
  );

-- Create indexes for better performance
create index idx_user_farmers_user_id on user_farmers(user_id);
create index idx_user_farmers_farmer_id on user_farmers(farmer_id);
create index idx_plots_farmer_id on plots(farmer_id);
create index idx_climate_data_plot_id on climate_data(plot_id);
create index idx_climate_data_date on climate_data(date);
create index idx_pest_monitoring_plot_id on pest_monitoring(plot_id);
create index idx_pest_monitoring_threat_type on pest_monitoring(threat_type);
create index idx_recommendations_plot_id on recommendations(plot_id);
create index idx_recommendations_date on recommendations(recommendation_date);